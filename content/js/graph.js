/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 93.0, "minX": 0.0, "maxY": 187322.0, "series": [{"data": [[0.0, 414.0], [0.1, 414.0], [0.2, 414.0], [0.3, 414.0], [0.4, 414.0], [0.5, 414.0], [0.6, 414.0], [0.7, 673.0], [0.8, 673.0], [0.9, 673.0], [1.0, 673.0], [1.1, 673.0], [1.2, 673.0], [1.3, 692.0], [1.4, 692.0], [1.5, 692.0], [1.6, 692.0], [1.7, 692.0], [1.8, 692.0], [1.9, 747.0], [2.0, 747.0], [2.1, 747.0], [2.2, 747.0], [2.3, 747.0], [2.4, 747.0], [2.5, 747.0], [2.6, 1099.0], [2.7, 1099.0], [2.8, 1099.0], [2.9, 1099.0], [3.0, 1099.0], [3.1, 1099.0], [3.2, 1116.0], [3.3, 1116.0], [3.4, 1116.0], [3.5, 1116.0], [3.6, 1116.0], [3.7, 1116.0], [3.8, 1147.0], [3.9, 1147.0], [4.0, 1147.0], [4.1, 1147.0], [4.2, 1147.0], [4.3, 1147.0], [4.4, 1147.0], [4.5, 1257.0], [4.6, 1257.0], [4.7, 1257.0], [4.8, 1257.0], [4.9, 1257.0], [5.0, 1257.0], [5.1, 1339.0], [5.2, 1339.0], [5.3, 1339.0], [5.4, 1339.0], [5.5, 1339.0], [5.6, 1339.0], [5.7, 1352.0], [5.8, 1352.0], [5.9, 1352.0], [6.0, 1352.0], [6.1, 1352.0], [6.2, 1352.0], [6.3, 1441.0], [6.4, 1441.0], [6.5, 1441.0], [6.6, 1441.0], [6.7, 1441.0], [6.8, 1441.0], [6.9, 1441.0], [7.0, 1478.0], [7.1, 1478.0], [7.2, 1478.0], [7.3, 1478.0], [7.4, 1478.0], [7.5, 1478.0], [7.6, 1483.0], [7.7, 1483.0], [7.8, 1483.0], [7.9, 1483.0], [8.0, 1483.0], [8.1, 1483.0], [8.2, 1506.0], [8.3, 1506.0], [8.4, 1506.0], [8.5, 1506.0], [8.6, 1506.0], [8.7, 1506.0], [8.8, 1506.0], [8.9, 1552.0], [9.0, 1552.0], [9.1, 1552.0], [9.2, 1552.0], [9.3, 1552.0], [9.4, 1552.0], [9.5, 1555.0], [9.6, 1555.0], [9.7, 1555.0], [9.8, 1555.0], [9.9, 1555.0], [10.0, 1555.0], [10.1, 1607.0], [10.2, 1607.0], [10.3, 1607.0], [10.4, 1607.0], [10.5, 1607.0], [10.6, 1607.0], [10.7, 1672.0], [10.8, 1672.0], [10.9, 1672.0], [11.0, 1672.0], [11.1, 1672.0], [11.2, 1672.0], [11.3, 1672.0], [11.4, 2215.0], [11.5, 2215.0], [11.6, 2215.0], [11.7, 2215.0], [11.8, 2215.0], [11.9, 2215.0], [12.0, 2219.0], [12.1, 2219.0], [12.2, 2219.0], [12.3, 2219.0], [12.4, 2219.0], [12.5, 2219.0], [12.6, 2228.0], [12.7, 2228.0], [12.8, 2228.0], [12.9, 2228.0], [13.0, 2228.0], [13.1, 2228.0], [13.2, 2228.0], [13.3, 2241.0], [13.4, 2241.0], [13.5, 2241.0], [13.6, 2241.0], [13.7, 2241.0], [13.8, 2241.0], [13.9, 2308.0], [14.0, 2308.0], [14.1, 2308.0], [14.2, 2308.0], [14.3, 2308.0], [14.4, 2308.0], [14.5, 2319.0], [14.6, 2319.0], [14.7, 2319.0], [14.8, 2319.0], [14.9, 2319.0], [15.0, 2319.0], [15.1, 2324.0], [15.2, 2324.0], [15.3, 2324.0], [15.4, 2324.0], [15.5, 2324.0], [15.6, 2324.0], [15.7, 2324.0], [15.8, 2572.0], [15.9, 2572.0], [16.0, 2572.0], [16.1, 2572.0], [16.2, 2572.0], [16.3, 2572.0], [16.4, 2575.0], [16.5, 2575.0], [16.6, 2575.0], [16.7, 2575.0], [16.8, 2575.0], [16.9, 2575.0], [17.0, 2612.0], [17.1, 2612.0], [17.2, 2612.0], [17.3, 2612.0], [17.4, 2612.0], [17.5, 2612.0], [17.6, 2612.0], [17.7, 2635.0], [17.8, 2635.0], [17.9, 2635.0], [18.0, 2635.0], [18.1, 2635.0], [18.2, 2635.0], [18.3, 2697.0], [18.4, 2697.0], [18.5, 2697.0], [18.6, 2697.0], [18.7, 2697.0], [18.8, 2697.0], [18.9, 2718.0], [19.0, 2718.0], [19.1, 2718.0], [19.2, 2718.0], [19.3, 2718.0], [19.4, 2718.0], [19.5, 2728.0], [19.6, 2728.0], [19.7, 2728.0], [19.8, 2728.0], [19.9, 2728.0], [20.0, 2728.0], [20.1, 2728.0], [20.2, 2736.0], [20.3, 2736.0], [20.4, 2736.0], [20.5, 2736.0], [20.6, 2736.0], [20.7, 2736.0], [20.8, 2779.0], [20.9, 2779.0], [21.0, 2779.0], [21.1, 2779.0], [21.2, 2779.0], [21.3, 2779.0], [21.4, 2790.0], [21.5, 2790.0], [21.6, 2790.0], [21.7, 2790.0], [21.8, 2790.0], [21.9, 2790.0], [22.0, 2790.0], [22.1, 2800.0], [22.2, 2800.0], [22.3, 2800.0], [22.4, 2800.0], [22.5, 2800.0], [22.6, 2800.0], [22.7, 2817.0], [22.8, 2817.0], [22.9, 2817.0], [23.0, 2817.0], [23.1, 2817.0], [23.2, 2817.0], [23.3, 2844.0], [23.4, 2844.0], [23.5, 2844.0], [23.6, 2844.0], [23.7, 2844.0], [23.8, 2844.0], [23.9, 2871.0], [24.0, 2871.0], [24.1, 2871.0], [24.2, 2871.0], [24.3, 2871.0], [24.4, 2871.0], [24.5, 2871.0], [24.6, 2882.0], [24.7, 2882.0], [24.8, 2882.0], [24.9, 2882.0], [25.0, 2882.0], [25.1, 2882.0], [25.2, 2913.0], [25.3, 2913.0], [25.4, 2913.0], [25.5, 2913.0], [25.6, 2913.0], [25.7, 2913.0], [25.8, 2915.0], [25.9, 2915.0], [26.0, 2915.0], [26.1, 2915.0], [26.2, 2915.0], [26.3, 2915.0], [26.4, 2915.0], [26.5, 2926.0], [26.6, 2926.0], [26.7, 2926.0], [26.8, 2926.0], [26.9, 2926.0], [27.0, 2926.0], [27.1, 2934.0], [27.2, 2934.0], [27.3, 2934.0], [27.4, 2934.0], [27.5, 2934.0], [27.6, 2934.0], [27.7, 2934.0], [27.8, 2934.0], [27.9, 2934.0], [28.0, 2934.0], [28.1, 2934.0], [28.2, 2934.0], [28.3, 2934.0], [28.4, 2952.0], [28.5, 2952.0], [28.6, 2952.0], [28.7, 2952.0], [28.8, 2952.0], [28.9, 2952.0], [29.0, 2959.0], [29.1, 2959.0], [29.2, 2959.0], [29.3, 2959.0], [29.4, 2959.0], [29.5, 2959.0], [29.6, 2966.0], [29.7, 2966.0], [29.8, 2966.0], [29.9, 2966.0], [30.0, 2966.0], [30.1, 2966.0], [30.2, 2974.0], [30.3, 2974.0], [30.4, 2974.0], [30.5, 2974.0], [30.6, 2974.0], [30.7, 2974.0], [30.8, 2974.0], [30.9, 2980.0], [31.0, 2980.0], [31.1, 2980.0], [31.2, 2980.0], [31.3, 2980.0], [31.4, 2980.0], [31.5, 3005.0], [31.6, 3005.0], [31.7, 3005.0], [31.8, 3005.0], [31.9, 3005.0], [32.0, 3005.0], [32.1, 3009.0], [32.2, 3009.0], [32.3, 3009.0], [32.4, 3009.0], [32.5, 3009.0], [32.6, 3009.0], [32.7, 3009.0], [32.8, 3010.0], [32.9, 3010.0], [33.0, 3010.0], [33.1, 3010.0], [33.2, 3010.0], [33.3, 3010.0], [33.4, 3012.0], [33.5, 3012.0], [33.6, 3012.0], [33.7, 3012.0], [33.8, 3012.0], [33.9, 3012.0], [34.0, 3020.0], [34.1, 3020.0], [34.2, 3020.0], [34.3, 3020.0], [34.4, 3020.0], [34.5, 3020.0], [34.6, 3102.0], [34.7, 3102.0], [34.8, 3102.0], [34.9, 3102.0], [35.0, 3102.0], [35.1, 3102.0], [35.2, 3102.0], [35.3, 3105.0], [35.4, 3105.0], [35.5, 3105.0], [35.6, 3105.0], [35.7, 3105.0], [35.8, 3105.0], [35.9, 3121.0], [36.0, 3121.0], [36.1, 3121.0], [36.2, 3121.0], [36.3, 3121.0], [36.4, 3121.0], [36.5, 3124.0], [36.6, 3124.0], [36.7, 3124.0], [36.8, 3124.0], [36.9, 3124.0], [37.0, 3124.0], [37.1, 3124.0], [37.2, 3137.0], [37.3, 3137.0], [37.4, 3137.0], [37.5, 3137.0], [37.6, 3137.0], [37.7, 3137.0], [37.8, 3141.0], [37.9, 3141.0], [38.0, 3141.0], [38.1, 3141.0], [38.2, 3141.0], [38.3, 3141.0], [38.4, 3159.0], [38.5, 3159.0], [38.6, 3159.0], [38.7, 3159.0], [38.8, 3159.0], [38.9, 3159.0], [39.0, 3169.0], [39.1, 3169.0], [39.2, 3169.0], [39.3, 3169.0], [39.4, 3169.0], [39.5, 3169.0], [39.6, 3169.0], [39.7, 3184.0], [39.8, 3184.0], [39.9, 3184.0], [40.0, 3184.0], [40.1, 3184.0], [40.2, 3184.0], [40.3, 3188.0], [40.4, 3188.0], [40.5, 3188.0], [40.6, 3188.0], [40.7, 3188.0], [40.8, 3188.0], [40.9, 3192.0], [41.0, 3192.0], [41.1, 3192.0], [41.2, 3192.0], [41.3, 3192.0], [41.4, 3192.0], [41.5, 3192.0], [41.6, 3263.0], [41.7, 3263.0], [41.8, 3263.0], [41.9, 3263.0], [42.0, 3263.0], [42.1, 3263.0], [42.2, 3284.0], [42.3, 3284.0], [42.4, 3284.0], [42.5, 3284.0], [42.6, 3284.0], [42.7, 3284.0], [42.8, 3310.0], [42.9, 3310.0], [43.0, 3310.0], [43.1, 3310.0], [43.2, 3310.0], [43.3, 3310.0], [43.4, 3513.0], [43.5, 3513.0], [43.6, 3513.0], [43.7, 3513.0], [43.8, 3513.0], [43.9, 3513.0], [44.0, 3513.0], [44.1, 3573.0], [44.2, 3573.0], [44.3, 3573.0], [44.4, 3573.0], [44.5, 3573.0], [44.6, 3573.0], [44.7, 3775.0], [44.8, 3775.0], [44.9, 3775.0], [45.0, 3775.0], [45.1, 3775.0], [45.2, 3775.0], [45.3, 3818.0], [45.4, 3818.0], [45.5, 3818.0], [45.6, 3818.0], [45.7, 3818.0], [45.8, 3818.0], [45.9, 3818.0], [46.0, 3861.0], [46.1, 3861.0], [46.2, 3861.0], [46.3, 3861.0], [46.4, 3861.0], [46.5, 3861.0], [46.6, 3913.0], [46.7, 3913.0], [46.8, 3913.0], [46.9, 3913.0], [47.0, 3913.0], [47.1, 3913.0], [47.2, 3963.0], [47.3, 3963.0], [47.4, 3963.0], [47.5, 3963.0], [47.6, 3963.0], [47.7, 3963.0], [47.8, 3975.0], [47.9, 3975.0], [48.0, 3975.0], [48.1, 3975.0], [48.2, 3975.0], [48.3, 3975.0], [48.4, 3975.0], [48.5, 4163.0], [48.6, 4163.0], [48.7, 4163.0], [48.8, 4163.0], [48.9, 4163.0], [49.0, 4163.0], [49.1, 4169.0], [49.2, 4169.0], [49.3, 4169.0], [49.4, 4169.0], [49.5, 4169.0], [49.6, 4169.0], [49.7, 4179.0], [49.8, 4179.0], [49.9, 4179.0], [50.0, 4179.0], [50.1, 4179.0], [50.2, 4179.0], [50.3, 4179.0], [50.4, 4184.0], [50.5, 4184.0], [50.6, 4184.0], [50.7, 4184.0], [50.8, 4184.0], [50.9, 4184.0], [51.0, 4186.0], [51.1, 4186.0], [51.2, 4186.0], [51.3, 4186.0], [51.4, 4186.0], [51.5, 4186.0], [51.6, 4188.0], [51.7, 4188.0], [51.8, 4188.0], [51.9, 4188.0], [52.0, 4188.0], [52.1, 4188.0], [52.2, 4188.0], [52.3, 4202.0], [52.4, 4202.0], [52.5, 4202.0], [52.6, 4202.0], [52.7, 4202.0], [52.8, 4202.0], [52.9, 4218.0], [53.0, 4218.0], [53.1, 4218.0], [53.2, 4218.0], [53.3, 4218.0], [53.4, 4218.0], [53.5, 4226.0], [53.6, 4226.0], [53.7, 4226.0], [53.8, 4226.0], [53.9, 4226.0], [54.0, 4226.0], [54.1, 4266.0], [54.2, 4266.0], [54.3, 4266.0], [54.4, 4266.0], [54.5, 4266.0], [54.6, 4266.0], [54.7, 4266.0], [54.8, 4439.0], [54.9, 4439.0], [55.0, 4439.0], [55.1, 4439.0], [55.2, 4439.0], [55.3, 4439.0], [55.4, 4461.0], [55.5, 4461.0], [55.6, 4461.0], [55.7, 4461.0], [55.8, 4461.0], [55.9, 4461.0], [56.0, 4616.0], [56.1, 4616.0], [56.2, 4616.0], [56.3, 4616.0], [56.4, 4616.0], [56.5, 4616.0], [56.6, 4616.0], [56.7, 4622.0], [56.8, 4622.0], [56.9, 4622.0], [57.0, 4622.0], [57.1, 4622.0], [57.2, 4622.0], [57.3, 4667.0], [57.4, 4667.0], [57.5, 4667.0], [57.6, 4667.0], [57.7, 4667.0], [57.8, 4667.0], [57.9, 4680.0], [58.0, 4680.0], [58.1, 4680.0], [58.2, 4680.0], [58.3, 4680.0], [58.4, 4680.0], [58.5, 4716.0], [58.6, 4716.0], [58.7, 4716.0], [58.8, 4716.0], [58.9, 4716.0], [59.0, 4716.0], [59.1, 4716.0], [59.2, 4734.0], [59.3, 4734.0], [59.4, 4734.0], [59.5, 4734.0], [59.6, 4734.0], [59.7, 4734.0], [59.8, 4734.0], [59.9, 4734.0], [60.0, 4734.0], [60.1, 4734.0], [60.2, 4734.0], [60.3, 4734.0], [60.4, 4749.0], [60.5, 4749.0], [60.6, 4749.0], [60.7, 4749.0], [60.8, 4749.0], [60.9, 4749.0], [61.0, 4749.0], [61.1, 4781.0], [61.2, 4781.0], [61.3, 4781.0], [61.4, 4781.0], [61.5, 4781.0], [61.6, 4781.0], [61.7, 4841.0], [61.8, 4841.0], [61.9, 4841.0], [62.0, 4841.0], [62.1, 4841.0], [62.2, 4841.0], [62.3, 4848.0], [62.4, 4848.0], [62.5, 4848.0], [62.6, 4848.0], [62.7, 4848.0], [62.8, 4848.0], [62.9, 4860.0], [63.0, 4860.0], [63.1, 4860.0], [63.2, 4860.0], [63.3, 4860.0], [63.4, 4860.0], [63.5, 4860.0], [63.6, 4885.0], [63.7, 4885.0], [63.8, 4885.0], [63.9, 4885.0], [64.0, 4885.0], [64.1, 4885.0], [64.2, 5033.0], [64.3, 5033.0], [64.4, 5033.0], [64.5, 5033.0], [64.6, 5033.0], [64.7, 5033.0], [64.8, 5043.0], [64.9, 5043.0], [65.0, 5043.0], [65.1, 5043.0], [65.2, 5043.0], [65.3, 5043.0], [65.4, 5043.0], [65.5, 5084.0], [65.6, 5084.0], [65.7, 5084.0], [65.8, 5084.0], [65.9, 5084.0], [66.0, 5084.0], [66.1, 5094.0], [66.2, 5094.0], [66.3, 5094.0], [66.4, 5094.0], [66.5, 5094.0], [66.6, 5094.0], [66.7, 5221.0], [66.8, 5221.0], [66.9, 5221.0], [67.0, 5221.0], [67.1, 5221.0], [67.2, 5221.0], [67.3, 5286.0], [67.4, 5286.0], [67.5, 5286.0], [67.6, 5286.0], [67.7, 5286.0], [67.8, 5286.0], [67.9, 5286.0], [68.0, 5290.0], [68.1, 5290.0], [68.2, 5290.0], [68.3, 5290.0], [68.4, 5290.0], [68.5, 5290.0], [68.6, 5291.0], [68.7, 5291.0], [68.8, 5291.0], [68.9, 5291.0], [69.0, 5291.0], [69.1, 5291.0], [69.2, 5320.0], [69.3, 5320.0], [69.4, 5320.0], [69.5, 5320.0], [69.6, 5320.0], [69.7, 5320.0], [69.8, 5320.0], [69.9, 5413.0], [70.0, 5413.0], [70.1, 5413.0], [70.2, 5413.0], [70.3, 5413.0], [70.4, 5413.0], [70.5, 5586.0], [70.6, 5586.0], [70.7, 5586.0], [70.8, 5586.0], [70.9, 5586.0], [71.0, 5586.0], [71.1, 5593.0], [71.2, 5593.0], [71.3, 5593.0], [71.4, 5593.0], [71.5, 5593.0], [71.6, 5593.0], [71.7, 5638.0], [71.8, 5638.0], [71.9, 5638.0], [72.0, 5638.0], [72.1, 5638.0], [72.2, 5638.0], [72.3, 5638.0], [72.4, 5647.0], [72.5, 5647.0], [72.6, 5647.0], [72.7, 5647.0], [72.8, 5647.0], [72.9, 5647.0], [73.0, 5701.0], [73.1, 5701.0], [73.2, 5701.0], [73.3, 5701.0], [73.4, 5701.0], [73.5, 5701.0], [73.6, 5712.0], [73.7, 5712.0], [73.8, 5712.0], [73.9, 5712.0], [74.0, 5712.0], [74.1, 5712.0], [74.2, 5712.0], [74.3, 5770.0], [74.4, 5770.0], [74.5, 5770.0], [74.6, 5770.0], [74.7, 5770.0], [74.8, 5770.0], [74.9, 5772.0], [75.0, 5772.0], [75.1, 5772.0], [75.2, 5772.0], [75.3, 5772.0], [75.4, 5772.0], [75.5, 5809.0], [75.6, 5809.0], [75.7, 5809.0], [75.8, 5809.0], [75.9, 5809.0], [76.0, 5809.0], [76.1, 5809.0], [76.2, 5837.0], [76.3, 5837.0], [76.4, 5837.0], [76.5, 5837.0], [76.6, 5837.0], [76.7, 5837.0], [76.8, 5849.0], [76.9, 5849.0], [77.0, 5849.0], [77.1, 5849.0], [77.2, 5849.0], [77.3, 5849.0], [77.4, 5860.0], [77.5, 5860.0], [77.6, 5860.0], [77.7, 5860.0], [77.8, 5860.0], [77.9, 5860.0], [78.0, 5911.0], [78.1, 5911.0], [78.2, 5911.0], [78.3, 5911.0], [78.4, 5911.0], [78.5, 5911.0], [78.6, 5911.0], [78.7, 5946.0], [78.8, 5946.0], [78.9, 5946.0], [79.0, 5946.0], [79.1, 5946.0], [79.2, 5946.0], [79.3, 6112.0], [79.4, 6112.0], [79.5, 6112.0], [79.6, 6112.0], [79.7, 6112.0], [79.8, 6112.0], [79.9, 6136.0], [80.0, 6136.0], [80.1, 6136.0], [80.2, 6136.0], [80.3, 6136.0], [80.4, 6136.0], [80.5, 6136.0], [80.6, 6409.0], [80.7, 6409.0], [80.8, 6409.0], [80.9, 6409.0], [81.0, 6409.0], [81.1, 6409.0], [81.2, 6430.0], [81.3, 6430.0], [81.4, 6430.0], [81.5, 6430.0], [81.6, 6430.0], [81.7, 6430.0], [81.8, 6447.0], [81.9, 6447.0], [82.0, 6447.0], [82.1, 6447.0], [82.2, 6447.0], [82.3, 6447.0], [82.4, 6457.0], [82.5, 6457.0], [82.6, 6457.0], [82.7, 6457.0], [82.8, 6457.0], [82.9, 6457.0], [83.0, 6457.0], [83.1, 6490.0], [83.2, 6490.0], [83.3, 6490.0], [83.4, 6490.0], [83.5, 6490.0], [83.6, 6490.0], [83.7, 6502.0], [83.8, 6502.0], [83.9, 6502.0], [84.0, 6502.0], [84.1, 6502.0], [84.2, 6502.0], [84.3, 6524.0], [84.4, 6524.0], [84.5, 6524.0], [84.6, 6524.0], [84.7, 6524.0], [84.8, 6524.0], [84.9, 6524.0], [85.0, 6612.0], [85.1, 6612.0], [85.2, 6612.0], [85.3, 6612.0], [85.4, 6612.0], [85.5, 6612.0], [85.6, 6663.0], [85.7, 6663.0], [85.8, 6663.0], [85.9, 6663.0], [86.0, 6663.0], [86.1, 6663.0], [86.2, 6705.0], [86.3, 6705.0], [86.4, 6705.0], [86.5, 6705.0], [86.6, 6705.0], [86.7, 6705.0], [86.8, 6764.0], [86.9, 6764.0], [87.0, 6764.0], [87.1, 6764.0], [87.2, 6764.0], [87.3, 6764.0], [87.4, 6764.0], [87.5, 6765.0], [87.6, 6765.0], [87.7, 6765.0], [87.8, 6765.0], [87.9, 6765.0], [88.0, 6765.0], [88.1, 6837.0], [88.2, 6837.0], [88.3, 6837.0], [88.4, 6837.0], [88.5, 6837.0], [88.6, 6837.0], [88.7, 6970.0], [88.8, 6970.0], [88.9, 6970.0], [89.0, 6970.0], [89.1, 6970.0], [89.2, 6970.0], [89.3, 6970.0], [89.4, 6994.0], [89.5, 6994.0], [89.6, 6994.0], [89.7, 6994.0], [89.8, 6994.0], [89.9, 6994.0], [90.0, 7030.0], [90.1, 7030.0], [90.2, 7030.0], [90.3, 7030.0], [90.4, 7030.0], [90.5, 7030.0], [90.6, 7043.0], [90.7, 7043.0], [90.8, 7043.0], [90.9, 7043.0], [91.0, 7043.0], [91.1, 7043.0], [91.2, 7171.0], [91.3, 7171.0], [91.4, 7171.0], [91.5, 7171.0], [91.6, 7171.0], [91.7, 7171.0], [91.8, 7171.0], [91.9, 7308.0], [92.0, 7308.0], [92.1, 7308.0], [92.2, 7308.0], [92.3, 7308.0], [92.4, 7308.0], [92.5, 7462.0], [92.6, 7462.0], [92.7, 7462.0], [92.8, 7462.0], [92.9, 7462.0], [93.0, 7462.0], [93.1, 7540.0], [93.2, 7540.0], [93.3, 7540.0], [93.4, 7540.0], [93.5, 7540.0], [93.6, 7540.0], [93.7, 7540.0], [93.8, 7602.0], [93.9, 7602.0], [94.0, 7602.0], [94.1, 7602.0], [94.2, 7602.0], [94.3, 7602.0], [94.4, 7675.0], [94.5, 7675.0], [94.6, 7675.0], [94.7, 7675.0], [94.8, 7675.0], [94.9, 7675.0], [95.0, 7680.0], [95.1, 7680.0], [95.2, 7680.0], [95.3, 7680.0], [95.4, 7680.0], [95.5, 7680.0], [95.6, 7870.0], [95.7, 7870.0], [95.8, 7870.0], [95.9, 7870.0], [96.0, 7870.0], [96.1, 7870.0], [96.2, 7870.0], [96.3, 8289.0], [96.4, 8289.0], [96.5, 8289.0], [96.6, 8289.0], [96.7, 8289.0], [96.8, 8289.0], [96.9, 9295.0], [97.0, 9295.0], [97.1, 9295.0], [97.2, 9295.0], [97.3, 9295.0], [97.4, 9295.0], [97.5, 9695.0], [97.6, 9695.0], [97.7, 9695.0], [97.8, 9695.0], [97.9, 9695.0], [98.0, 9695.0], [98.1, 9695.0], [98.2, 10821.0], [98.3, 10821.0], [98.4, 10821.0], [98.5, 10821.0], [98.6, 10821.0], [98.7, 10821.0], [98.8, 10938.0], [98.9, 10938.0], [99.0, 10938.0], [99.1, 10938.0], [99.2, 10938.0], [99.3, 10938.0], [99.4, 11161.0], [99.5, 11161.0], [99.6, 11161.0], [99.7, 11161.0], [99.8, 11161.0], [99.9, 11161.0], [100.0, 11161.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 93.0], [0.1, 93.0], [0.2, 93.0], [0.3, 93.0], [0.4, 93.0], [0.5, 93.0], [0.6, 93.0], [0.7, 96.0], [0.8, 96.0], [0.9, 96.0], [1.0, 96.0], [1.1, 96.0], [1.2, 96.0], [1.3, 96.0], [1.4, 96.0], [1.5, 96.0], [1.6, 96.0], [1.7, 96.0], [1.8, 96.0], [1.9, 97.0], [2.0, 97.0], [2.1, 97.0], [2.2, 97.0], [2.3, 97.0], [2.4, 97.0], [2.5, 97.0], [2.6, 98.0], [2.7, 98.0], [2.8, 98.0], [2.9, 98.0], [3.0, 98.0], [3.1, 98.0], [3.2, 99.0], [3.3, 99.0], [3.4, 99.0], [3.5, 99.0], [3.6, 99.0], [3.7, 99.0], [3.8, 100.0], [3.9, 100.0], [4.0, 100.0], [4.1, 100.0], [4.2, 100.0], [4.3, 100.0], [4.4, 100.0], [4.5, 101.0], [4.6, 101.0], [4.7, 101.0], [4.8, 101.0], [4.9, 101.0], [5.0, 101.0], [5.1, 101.0], [5.2, 101.0], [5.3, 101.0], [5.4, 101.0], [5.5, 101.0], [5.6, 101.0], [5.7, 101.0], [5.8, 101.0], [5.9, 101.0], [6.0, 101.0], [6.1, 101.0], [6.2, 101.0], [6.3, 102.0], [6.4, 102.0], [6.5, 102.0], [6.6, 102.0], [6.7, 102.0], [6.8, 102.0], [6.9, 102.0], [7.0, 103.0], [7.1, 103.0], [7.2, 103.0], [7.3, 103.0], [7.4, 103.0], [7.5, 103.0], [7.6, 104.0], [7.7, 104.0], [7.8, 104.0], [7.9, 104.0], [8.0, 104.0], [8.1, 104.0], [8.2, 105.0], [8.3, 105.0], [8.4, 105.0], [8.5, 105.0], [8.6, 105.0], [8.7, 105.0], [8.8, 105.0], [8.9, 106.0], [9.0, 106.0], [9.1, 106.0], [9.2, 106.0], [9.3, 106.0], [9.4, 106.0], [9.5, 107.0], [9.6, 107.0], [9.7, 107.0], [9.8, 107.0], [9.9, 107.0], [10.0, 107.0], [10.1, 108.0], [10.2, 108.0], [10.3, 108.0], [10.4, 108.0], [10.5, 108.0], [10.6, 108.0], [10.7, 108.0], [10.8, 108.0], [10.9, 108.0], [11.0, 108.0], [11.1, 108.0], [11.2, 108.0], [11.3, 108.0], [11.4, 109.0], [11.5, 109.0], [11.6, 109.0], [11.7, 109.0], [11.8, 109.0], [11.9, 109.0], [12.0, 109.0], [12.1, 109.0], [12.2, 109.0], [12.3, 109.0], [12.4, 109.0], [12.5, 109.0], [12.6, 113.0], [12.7, 113.0], [12.8, 113.0], [12.9, 113.0], [13.0, 113.0], [13.1, 113.0], [13.2, 113.0], [13.3, 115.0], [13.4, 115.0], [13.5, 115.0], [13.6, 115.0], [13.7, 115.0], [13.8, 115.0], [13.9, 115.0], [14.0, 115.0], [14.1, 115.0], [14.2, 115.0], [14.3, 115.0], [14.4, 115.0], [14.5, 115.0], [14.6, 115.0], [14.7, 115.0], [14.8, 115.0], [14.9, 115.0], [15.0, 115.0], [15.1, 117.0], [15.2, 117.0], [15.3, 117.0], [15.4, 117.0], [15.5, 117.0], [15.6, 117.0], [15.7, 117.0], [15.8, 117.0], [15.9, 117.0], [16.0, 117.0], [16.1, 117.0], [16.2, 117.0], [16.3, 117.0], [16.4, 119.0], [16.5, 119.0], [16.6, 119.0], [16.7, 119.0], [16.8, 119.0], [16.9, 119.0], [17.0, 120.0], [17.1, 120.0], [17.2, 120.0], [17.3, 120.0], [17.4, 120.0], [17.5, 120.0], [17.6, 120.0], [17.7, 123.0], [17.8, 123.0], [17.9, 123.0], [18.0, 123.0], [18.1, 123.0], [18.2, 123.0], [18.3, 124.0], [18.4, 124.0], [18.5, 124.0], [18.6, 124.0], [18.7, 124.0], [18.8, 124.0], [18.9, 124.0], [19.0, 124.0], [19.1, 124.0], [19.2, 124.0], [19.3, 124.0], [19.4, 124.0], [19.5, 125.0], [19.6, 125.0], [19.7, 125.0], [19.8, 125.0], [19.9, 125.0], [20.0, 125.0], [20.1, 125.0], [20.2, 125.0], [20.3, 125.0], [20.4, 125.0], [20.5, 125.0], [20.6, 125.0], [20.7, 125.0], [20.8, 126.0], [20.9, 126.0], [21.0, 126.0], [21.1, 126.0], [21.2, 126.0], [21.3, 126.0], [21.4, 127.0], [21.5, 127.0], [21.6, 127.0], [21.7, 127.0], [21.8, 127.0], [21.9, 127.0], [22.0, 127.0], [22.1, 127.0], [22.2, 127.0], [22.3, 127.0], [22.4, 127.0], [22.5, 127.0], [22.6, 127.0], [22.7, 132.0], [22.8, 132.0], [22.9, 132.0], [23.0, 132.0], [23.1, 132.0], [23.2, 132.0], [23.3, 133.0], [23.4, 133.0], [23.5, 133.0], [23.6, 133.0], [23.7, 133.0], [23.8, 133.0], [23.9, 133.0], [24.0, 133.0], [24.1, 133.0], [24.2, 133.0], [24.3, 133.0], [24.4, 133.0], [24.5, 133.0], [24.6, 134.0], [24.7, 134.0], [24.8, 134.0], [24.9, 134.0], [25.0, 134.0], [25.1, 134.0], [25.2, 136.0], [25.3, 136.0], [25.4, 136.0], [25.5, 136.0], [25.6, 136.0], [25.7, 136.0], [25.8, 138.0], [25.9, 138.0], [26.0, 138.0], [26.1, 138.0], [26.2, 138.0], [26.3, 138.0], [26.4, 138.0], [26.5, 140.0], [26.6, 140.0], [26.7, 140.0], [26.8, 140.0], [26.9, 140.0], [27.0, 140.0], [27.1, 145.0], [27.2, 145.0], [27.3, 145.0], [27.4, 145.0], [27.5, 145.0], [27.6, 145.0], [27.7, 164.0], [27.8, 164.0], [27.9, 164.0], [28.0, 164.0], [28.1, 164.0], [28.2, 164.0], [28.3, 164.0], [28.4, 166.0], [28.5, 166.0], [28.6, 166.0], [28.7, 166.0], [28.8, 166.0], [28.9, 166.0], [29.0, 181.0], [29.1, 181.0], [29.2, 181.0], [29.3, 181.0], [29.4, 181.0], [29.5, 181.0], [29.6, 198.0], [29.7, 198.0], [29.8, 198.0], [29.9, 198.0], [30.0, 198.0], [30.1, 198.0], [30.2, 198.0], [30.3, 198.0], [30.4, 198.0], [30.5, 198.0], [30.6, 198.0], [30.7, 198.0], [30.8, 198.0], [30.9, 209.0], [31.0, 209.0], [31.1, 209.0], [31.2, 209.0], [31.3, 209.0], [31.4, 209.0], [31.5, 225.0], [31.6, 225.0], [31.7, 225.0], [31.8, 225.0], [31.9, 225.0], [32.0, 225.0], [32.1, 238.0], [32.2, 238.0], [32.3, 238.0], [32.4, 238.0], [32.5, 238.0], [32.6, 238.0], [32.7, 238.0], [32.8, 246.0], [32.9, 246.0], [33.0, 246.0], [33.1, 246.0], [33.2, 246.0], [33.3, 246.0], [33.4, 253.0], [33.5, 253.0], [33.6, 253.0], [33.7, 253.0], [33.8, 253.0], [33.9, 253.0], [34.0, 259.0], [34.1, 259.0], [34.2, 259.0], [34.3, 259.0], [34.4, 259.0], [34.5, 259.0], [34.6, 260.0], [34.7, 260.0], [34.8, 260.0], [34.9, 260.0], [35.0, 260.0], [35.1, 260.0], [35.2, 260.0], [35.3, 262.0], [35.4, 262.0], [35.5, 262.0], [35.6, 262.0], [35.7, 262.0], [35.8, 262.0], [35.9, 293.0], [36.0, 293.0], [36.1, 293.0], [36.2, 293.0], [36.3, 293.0], [36.4, 293.0], [36.5, 295.0], [36.6, 295.0], [36.7, 295.0], [36.8, 295.0], [36.9, 295.0], [37.0, 295.0], [37.1, 295.0], [37.2, 302.0], [37.3, 302.0], [37.4, 302.0], [37.5, 302.0], [37.6, 302.0], [37.7, 302.0], [37.8, 315.0], [37.9, 315.0], [38.0, 315.0], [38.1, 315.0], [38.2, 315.0], [38.3, 315.0], [38.4, 315.0], [38.5, 315.0], [38.6, 315.0], [38.7, 315.0], [38.8, 315.0], [38.9, 315.0], [39.0, 324.0], [39.1, 324.0], [39.2, 324.0], [39.3, 324.0], [39.4, 324.0], [39.5, 324.0], [39.6, 324.0], [39.7, 325.0], [39.8, 325.0], [39.9, 325.0], [40.0, 325.0], [40.1, 325.0], [40.2, 325.0], [40.3, 330.0], [40.4, 330.0], [40.5, 330.0], [40.6, 330.0], [40.7, 330.0], [40.8, 330.0], [40.9, 332.0], [41.0, 332.0], [41.1, 332.0], [41.2, 332.0], [41.3, 332.0], [41.4, 332.0], [41.5, 332.0], [41.6, 333.0], [41.7, 333.0], [41.8, 333.0], [41.9, 333.0], [42.0, 333.0], [42.1, 333.0], [42.2, 336.0], [42.3, 336.0], [42.4, 336.0], [42.5, 336.0], [42.6, 336.0], [42.7, 336.0], [42.8, 359.0], [42.9, 359.0], [43.0, 359.0], [43.1, 359.0], [43.2, 359.0], [43.3, 359.0], [43.4, 360.0], [43.5, 360.0], [43.6, 360.0], [43.7, 360.0], [43.8, 360.0], [43.9, 360.0], [44.0, 360.0], [44.1, 380.0], [44.2, 380.0], [44.3, 380.0], [44.4, 380.0], [44.5, 380.0], [44.6, 380.0], [44.7, 395.0], [44.8, 395.0], [44.9, 395.0], [45.0, 395.0], [45.1, 395.0], [45.2, 395.0], [45.3, 406.0], [45.4, 406.0], [45.5, 406.0], [45.6, 406.0], [45.7, 406.0], [45.8, 406.0], [45.9, 406.0], [46.0, 407.0], [46.1, 407.0], [46.2, 407.0], [46.3, 407.0], [46.4, 407.0], [46.5, 407.0], [46.6, 422.0], [46.7, 422.0], [46.8, 422.0], [46.9, 422.0], [47.0, 422.0], [47.1, 422.0], [47.2, 423.0], [47.3, 423.0], [47.4, 423.0], [47.5, 423.0], [47.6, 423.0], [47.7, 423.0], [47.8, 424.0], [47.9, 424.0], [48.0, 424.0], [48.1, 424.0], [48.2, 424.0], [48.3, 424.0], [48.4, 424.0], [48.5, 434.0], [48.6, 434.0], [48.7, 434.0], [48.8, 434.0], [48.9, 434.0], [49.0, 434.0], [49.1, 466.0], [49.2, 466.0], [49.3, 466.0], [49.4, 466.0], [49.5, 466.0], [49.6, 466.0], [49.7, 503.0], [49.8, 503.0], [49.9, 503.0], [50.0, 503.0], [50.1, 503.0], [50.2, 503.0], [50.3, 503.0], [50.4, 519.0], [50.5, 519.0], [50.6, 519.0], [50.7, 519.0], [50.8, 519.0], [50.9, 519.0], [51.0, 526.0], [51.1, 526.0], [51.2, 526.0], [51.3, 526.0], [51.4, 526.0], [51.5, 526.0], [51.6, 553.0], [51.7, 553.0], [51.8, 553.0], [51.9, 553.0], [52.0, 553.0], [52.1, 553.0], [52.2, 553.0], [52.3, 555.0], [52.4, 555.0], [52.5, 555.0], [52.6, 555.0], [52.7, 555.0], [52.8, 555.0], [52.9, 580.0], [53.0, 580.0], [53.1, 580.0], [53.2, 580.0], [53.3, 580.0], [53.4, 580.0], [53.5, 585.0], [53.6, 585.0], [53.7, 585.0], [53.8, 585.0], [53.9, 585.0], [54.0, 585.0], [54.1, 601.0], [54.2, 601.0], [54.3, 601.0], [54.4, 601.0], [54.5, 601.0], [54.6, 601.0], [54.7, 601.0], [54.8, 618.0], [54.9, 618.0], [55.0, 618.0], [55.1, 618.0], [55.2, 618.0], [55.3, 618.0], [55.4, 620.0], [55.5, 620.0], [55.6, 620.0], [55.7, 620.0], [55.8, 620.0], [55.9, 620.0], [56.0, 634.0], [56.1, 634.0], [56.2, 634.0], [56.3, 634.0], [56.4, 634.0], [56.5, 634.0], [56.6, 634.0], [56.7, 645.0], [56.8, 645.0], [56.9, 645.0], [57.0, 645.0], [57.1, 645.0], [57.2, 645.0], [57.3, 666.0], [57.4, 666.0], [57.5, 666.0], [57.6, 666.0], [57.7, 666.0], [57.8, 666.0], [57.9, 729.0], [58.0, 729.0], [58.1, 729.0], [58.2, 729.0], [58.3, 729.0], [58.4, 729.0], [58.5, 752.0], [58.6, 752.0], [58.7, 752.0], [58.8, 752.0], [58.9, 752.0], [59.0, 752.0], [59.1, 752.0], [59.2, 755.0], [59.3, 755.0], [59.4, 755.0], [59.5, 755.0], [59.6, 755.0], [59.7, 755.0], [59.8, 817.0], [59.9, 817.0], [60.0, 817.0], [60.1, 817.0], [60.2, 817.0], [60.3, 817.0], [60.4, 980.0], [60.5, 980.0], [60.6, 980.0], [60.7, 980.0], [60.8, 980.0], [60.9, 980.0], [61.0, 980.0], [61.1, 1001.0], [61.2, 1001.0], [61.3, 1001.0], [61.4, 1001.0], [61.5, 1001.0], [61.6, 1001.0], [61.7, 1078.0], [61.8, 1078.0], [61.9, 1078.0], [62.0, 1078.0], [62.1, 1078.0], [62.2, 1078.0], [62.3, 1084.0], [62.4, 1084.0], [62.5, 1084.0], [62.6, 1084.0], [62.7, 1084.0], [62.8, 1084.0], [62.9, 1236.0], [63.0, 1236.0], [63.1, 1236.0], [63.2, 1236.0], [63.3, 1236.0], [63.4, 1236.0], [63.5, 1236.0], [63.6, 1270.0], [63.7, 1270.0], [63.8, 1270.0], [63.9, 1270.0], [64.0, 1270.0], [64.1, 1270.0], [64.2, 1274.0], [64.3, 1274.0], [64.4, 1274.0], [64.5, 1274.0], [64.6, 1274.0], [64.7, 1274.0], [64.8, 1283.0], [64.9, 1283.0], [65.0, 1283.0], [65.1, 1283.0], [65.2, 1283.0], [65.3, 1283.0], [65.4, 1283.0], [65.5, 1297.0], [65.6, 1297.0], [65.7, 1297.0], [65.8, 1297.0], [65.9, 1297.0], [66.0, 1297.0], [66.1, 1312.0], [66.2, 1312.0], [66.3, 1312.0], [66.4, 1312.0], [66.5, 1312.0], [66.6, 1312.0], [66.7, 1313.0], [66.8, 1313.0], [66.9, 1313.0], [67.0, 1313.0], [67.1, 1313.0], [67.2, 1313.0], [67.3, 1316.0], [67.4, 1316.0], [67.5, 1316.0], [67.6, 1316.0], [67.7, 1316.0], [67.8, 1316.0], [67.9, 1316.0], [68.0, 1336.0], [68.1, 1336.0], [68.2, 1336.0], [68.3, 1336.0], [68.4, 1336.0], [68.5, 1336.0], [68.6, 1343.0], [68.7, 1343.0], [68.8, 1343.0], [68.9, 1343.0], [69.0, 1343.0], [69.1, 1343.0], [69.2, 1345.0], [69.3, 1345.0], [69.4, 1345.0], [69.5, 1345.0], [69.6, 1345.0], [69.7, 1345.0], [69.8, 1345.0], [69.9, 1350.0], [70.0, 1350.0], [70.1, 1350.0], [70.2, 1350.0], [70.3, 1350.0], [70.4, 1350.0], [70.5, 1377.0], [70.6, 1377.0], [70.7, 1377.0], [70.8, 1377.0], [70.9, 1377.0], [71.0, 1377.0], [71.1, 1380.0], [71.2, 1380.0], [71.3, 1380.0], [71.4, 1380.0], [71.5, 1380.0], [71.6, 1380.0], [71.7, 1385.0], [71.8, 1385.0], [71.9, 1385.0], [72.0, 1385.0], [72.1, 1385.0], [72.2, 1385.0], [72.3, 1385.0], [72.4, 1397.0], [72.5, 1397.0], [72.6, 1397.0], [72.7, 1397.0], [72.8, 1397.0], [72.9, 1397.0], [73.0, 1466.0], [73.1, 1466.0], [73.2, 1466.0], [73.3, 1466.0], [73.4, 1466.0], [73.5, 1466.0], [73.6, 1474.0], [73.7, 1474.0], [73.8, 1474.0], [73.9, 1474.0], [74.0, 1474.0], [74.1, 1474.0], [74.2, 1474.0], [74.3, 1529.0], [74.4, 1529.0], [74.5, 1529.0], [74.6, 1529.0], [74.7, 1529.0], [74.8, 1529.0], [74.9, 1555.0], [75.0, 1555.0], [75.1, 1555.0], [75.2, 1555.0], [75.3, 1555.0], [75.4, 1555.0], [75.5, 1602.0], [75.6, 1602.0], [75.7, 1602.0], [75.8, 1602.0], [75.9, 1602.0], [76.0, 1602.0], [76.1, 1602.0], [76.2, 1675.0], [76.3, 1675.0], [76.4, 1675.0], [76.5, 1675.0], [76.6, 1675.0], [76.7, 1675.0], [76.8, 1763.0], [76.9, 1763.0], [77.0, 1763.0], [77.1, 1763.0], [77.2, 1763.0], [77.3, 1763.0], [77.4, 1765.0], [77.5, 1765.0], [77.6, 1765.0], [77.7, 1765.0], [77.8, 1765.0], [77.9, 1765.0], [78.0, 1828.0], [78.1, 1828.0], [78.2, 1828.0], [78.3, 1828.0], [78.4, 1828.0], [78.5, 1828.0], [78.6, 1828.0], [78.7, 1875.0], [78.8, 1875.0], [78.9, 1875.0], [79.0, 1875.0], [79.1, 1875.0], [79.2, 1875.0], [79.3, 1886.0], [79.4, 1886.0], [79.5, 1886.0], [79.6, 1886.0], [79.7, 1886.0], [79.8, 1886.0], [79.9, 1901.0], [80.0, 1901.0], [80.1, 1901.0], [80.2, 1901.0], [80.3, 1901.0], [80.4, 1901.0], [80.5, 1901.0], [80.6, 1922.0], [80.7, 1922.0], [80.8, 1922.0], [80.9, 1922.0], [81.0, 1922.0], [81.1, 1922.0], [81.2, 1923.0], [81.3, 1923.0], [81.4, 1923.0], [81.5, 1923.0], [81.6, 1923.0], [81.7, 1923.0], [81.8, 2010.0], [81.9, 2010.0], [82.0, 2010.0], [82.1, 2010.0], [82.2, 2010.0], [82.3, 2010.0], [82.4, 2050.0], [82.5, 2050.0], [82.6, 2050.0], [82.7, 2050.0], [82.8, 2050.0], [82.9, 2050.0], [83.0, 2050.0], [83.1, 2080.0], [83.2, 2080.0], [83.3, 2080.0], [83.4, 2080.0], [83.5, 2080.0], [83.6, 2080.0], [83.7, 2170.0], [83.8, 2170.0], [83.9, 2170.0], [84.0, 2170.0], [84.1, 2170.0], [84.2, 2170.0], [84.3, 2189.0], [84.4, 2189.0], [84.5, 2189.0], [84.6, 2189.0], [84.7, 2189.0], [84.8, 2189.0], [84.9, 2189.0], [85.0, 2238.0], [85.1, 2238.0], [85.2, 2238.0], [85.3, 2238.0], [85.4, 2238.0], [85.5, 2238.0], [85.6, 2239.0], [85.7, 2239.0], [85.8, 2239.0], [85.9, 2239.0], [86.0, 2239.0], [86.1, 2239.0], [86.2, 2254.0], [86.3, 2254.0], [86.4, 2254.0], [86.5, 2254.0], [86.6, 2254.0], [86.7, 2254.0], [86.8, 2289.0], [86.9, 2289.0], [87.0, 2289.0], [87.1, 2289.0], [87.2, 2289.0], [87.3, 2289.0], [87.4, 2289.0], [87.5, 2292.0], [87.6, 2292.0], [87.7, 2292.0], [87.8, 2292.0], [87.9, 2292.0], [88.0, 2292.0], [88.1, 2329.0], [88.2, 2329.0], [88.3, 2329.0], [88.4, 2329.0], [88.5, 2329.0], [88.6, 2329.0], [88.7, 2349.0], [88.8, 2349.0], [88.9, 2349.0], [89.0, 2349.0], [89.1, 2349.0], [89.2, 2349.0], [89.3, 2349.0], [89.4, 2349.0], [89.5, 2349.0], [89.6, 2349.0], [89.7, 2349.0], [89.8, 2349.0], [89.9, 2349.0], [90.0, 2349.0], [90.1, 2349.0], [90.2, 2349.0], [90.3, 2349.0], [90.4, 2349.0], [90.5, 2349.0], [90.6, 2352.0], [90.7, 2352.0], [90.8, 2352.0], [90.9, 2352.0], [91.0, 2352.0], [91.1, 2352.0], [91.2, 2366.0], [91.3, 2366.0], [91.4, 2366.0], [91.5, 2366.0], [91.6, 2366.0], [91.7, 2366.0], [91.8, 2366.0], [91.9, 2396.0], [92.0, 2396.0], [92.1, 2396.0], [92.2, 2396.0], [92.3, 2396.0], [92.4, 2396.0], [92.5, 2418.0], [92.6, 2418.0], [92.7, 2418.0], [92.8, 2418.0], [92.9, 2418.0], [93.0, 2418.0], [93.1, 2522.0], [93.2, 2522.0], [93.3, 2522.0], [93.4, 2522.0], [93.5, 2522.0], [93.6, 2522.0], [93.7, 2522.0], [93.8, 2547.0], [93.9, 2547.0], [94.0, 2547.0], [94.1, 2547.0], [94.2, 2547.0], [94.3, 2547.0], [94.4, 3042.0], [94.5, 3042.0], [94.6, 3042.0], [94.7, 3042.0], [94.8, 3042.0], [94.9, 3042.0], [95.0, 3115.0], [95.1, 3115.0], [95.2, 3115.0], [95.3, 3115.0], [95.4, 3115.0], [95.5, 3115.0], [95.6, 3268.0], [95.7, 3268.0], [95.8, 3268.0], [95.9, 3268.0], [96.0, 3268.0], [96.1, 3268.0], [96.2, 3268.0], [96.3, 3640.0], [96.4, 3640.0], [96.5, 3640.0], [96.6, 3640.0], [96.7, 3640.0], [96.8, 3640.0], [96.9, 3651.0], [97.0, 3651.0], [97.1, 3651.0], [97.2, 3651.0], [97.3, 3651.0], [97.4, 3651.0], [97.5, 3908.0], [97.6, 3908.0], [97.7, 3908.0], [97.8, 3908.0], [97.9, 3908.0], [98.0, 3908.0], [98.1, 3908.0], [98.2, 5003.0], [98.3, 5003.0], [98.4, 5003.0], [98.5, 5003.0], [98.6, 5003.0], [98.7, 5003.0], [98.8, 5075.0], [98.9, 5075.0], [99.0, 5075.0], [99.1, 5075.0], [99.2, 5075.0], [99.3, 5075.0], [99.4, 5115.0], [99.5, 5115.0], [99.6, 5115.0], [99.7, 5115.0], [99.8, 5115.0], [99.9, 5115.0], [100.0, 5115.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 819.0], [0.1, 819.0], [0.2, 819.0], [0.3, 819.0], [0.4, 819.0], [0.5, 819.0], [0.6, 819.0], [0.7, 990.0], [0.8, 990.0], [0.9, 990.0], [1.0, 990.0], [1.1, 990.0], [1.2, 990.0], [1.3, 1292.0], [1.4, 1292.0], [1.5, 1292.0], [1.6, 1292.0], [1.7, 1292.0], [1.8, 1292.0], [1.9, 1447.0], [2.0, 1447.0], [2.1, 1447.0], [2.2, 1447.0], [2.3, 1447.0], [2.4, 1447.0], [2.5, 1477.0], [2.6, 1477.0], [2.7, 1477.0], [2.8, 1477.0], [2.9, 1477.0], [3.0, 1477.0], [3.1, 1477.0], [3.2, 1498.0], [3.3, 1498.0], [3.4, 1498.0], [3.5, 1498.0], [3.6, 1498.0], [3.7, 1498.0], [3.8, 1646.0], [3.9, 1646.0], [4.0, 1646.0], [4.1, 1646.0], [4.2, 1646.0], [4.3, 1646.0], [4.4, 1671.0], [4.5, 1671.0], [4.6, 1671.0], [4.7, 1671.0], [4.8, 1671.0], [4.9, 1671.0], [5.0, 1745.0], [5.1, 1745.0], [5.2, 1745.0], [5.3, 1745.0], [5.4, 1745.0], [5.5, 1745.0], [5.6, 1745.0], [5.7, 1745.0], [5.8, 1745.0], [5.9, 1745.0], [6.0, 1745.0], [6.1, 1745.0], [6.2, 1745.0], [6.3, 1809.0], [6.4, 1809.0], [6.5, 1809.0], [6.6, 1809.0], [6.7, 1809.0], [6.8, 1809.0], [6.9, 1838.0], [7.0, 1838.0], [7.1, 1838.0], [7.2, 1838.0], [7.3, 1838.0], [7.4, 1838.0], [7.5, 1859.0], [7.6, 1859.0], [7.7, 1859.0], [7.8, 1859.0], [7.9, 1859.0], [8.0, 1859.0], [8.1, 1859.0], [8.2, 2021.0], [8.3, 2021.0], [8.4, 2021.0], [8.5, 2021.0], [8.6, 2021.0], [8.7, 2021.0], [8.8, 2061.0], [8.9, 2061.0], [9.0, 2061.0], [9.1, 2061.0], [9.2, 2061.0], [9.3, 2061.0], [9.4, 2135.0], [9.5, 2135.0], [9.6, 2135.0], [9.7, 2135.0], [9.8, 2135.0], [9.9, 2135.0], [10.0, 2230.0], [10.1, 2230.0], [10.2, 2230.0], [10.3, 2230.0], [10.4, 2230.0], [10.5, 2230.0], [10.6, 2230.0], [10.7, 3123.0], [10.8, 3123.0], [10.9, 3123.0], [11.0, 3123.0], [11.1, 3123.0], [11.2, 3123.0], [11.3, 3187.0], [11.4, 3187.0], [11.5, 3187.0], [11.6, 3187.0], [11.7, 3187.0], [11.8, 3187.0], [11.9, 3216.0], [12.0, 3216.0], [12.1, 3216.0], [12.2, 3216.0], [12.3, 3216.0], [12.4, 3216.0], [12.5, 3318.0], [12.6, 3318.0], [12.7, 3318.0], [12.8, 3318.0], [12.9, 3318.0], [13.0, 3318.0], [13.1, 3318.0], [13.2, 3326.0], [13.3, 3326.0], [13.4, 3326.0], [13.5, 3326.0], [13.6, 3326.0], [13.7, 3326.0], [13.8, 3399.0], [13.9, 3399.0], [14.0, 3399.0], [14.1, 3399.0], [14.2, 3399.0], [14.3, 3399.0], [14.4, 3403.0], [14.5, 3403.0], [14.6, 3403.0], [14.7, 3403.0], [14.8, 3403.0], [14.9, 3403.0], [15.0, 3445.0], [15.1, 3445.0], [15.2, 3445.0], [15.3, 3445.0], [15.4, 3445.0], [15.5, 3445.0], [15.6, 3445.0], [15.7, 3456.0], [15.8, 3456.0], [15.9, 3456.0], [16.0, 3456.0], [16.1, 3456.0], [16.2, 3456.0], [16.3, 3544.0], [16.4, 3544.0], [16.5, 3544.0], [16.6, 3544.0], [16.7, 3544.0], [16.8, 3544.0], [16.9, 3609.0], [17.0, 3609.0], [17.1, 3609.0], [17.2, 3609.0], [17.3, 3609.0], [17.4, 3609.0], [17.5, 3708.0], [17.6, 3708.0], [17.7, 3708.0], [17.8, 3708.0], [17.9, 3708.0], [18.0, 3708.0], [18.1, 3708.0], [18.2, 3972.0], [18.3, 3972.0], [18.4, 3972.0], [18.5, 3972.0], [18.6, 3972.0], [18.7, 3972.0], [18.8, 4063.0], [18.9, 4063.0], [19.0, 4063.0], [19.1, 4063.0], [19.2, 4063.0], [19.3, 4063.0], [19.4, 4095.0], [19.5, 4095.0], [19.6, 4095.0], [19.7, 4095.0], [19.8, 4095.0], [19.9, 4095.0], [20.0, 4134.0], [20.1, 4134.0], [20.2, 4134.0], [20.3, 4134.0], [20.4, 4134.0], [20.5, 4134.0], [20.6, 4134.0], [20.7, 4169.0], [20.8, 4169.0], [20.9, 4169.0], [21.0, 4169.0], [21.1, 4169.0], [21.2, 4169.0], [21.3, 4184.0], [21.4, 4184.0], [21.5, 4184.0], [21.6, 4184.0], [21.7, 4184.0], [21.8, 4184.0], [21.9, 4190.0], [22.0, 4190.0], [22.1, 4190.0], [22.2, 4190.0], [22.3, 4190.0], [22.4, 4190.0], [22.5, 4232.0], [22.6, 4232.0], [22.7, 4232.0], [22.8, 4232.0], [22.9, 4232.0], [23.0, 4232.0], [23.1, 4232.0], [23.2, 4313.0], [23.3, 4313.0], [23.4, 4313.0], [23.5, 4313.0], [23.6, 4313.0], [23.7, 4313.0], [23.8, 4356.0], [23.9, 4356.0], [24.0, 4356.0], [24.1, 4356.0], [24.2, 4356.0], [24.3, 4356.0], [24.4, 4380.0], [24.5, 4380.0], [24.6, 4380.0], [24.7, 4380.0], [24.8, 4380.0], [24.9, 4380.0], [25.0, 4383.0], [25.1, 4383.0], [25.2, 4383.0], [25.3, 4383.0], [25.4, 4383.0], [25.5, 4383.0], [25.6, 4383.0], [25.7, 4390.0], [25.8, 4390.0], [25.9, 4390.0], [26.0, 4390.0], [26.1, 4390.0], [26.2, 4390.0], [26.3, 4425.0], [26.4, 4425.0], [26.5, 4425.0], [26.6, 4425.0], [26.7, 4425.0], [26.8, 4425.0], [26.9, 4441.0], [27.0, 4441.0], [27.1, 4441.0], [27.2, 4441.0], [27.3, 4441.0], [27.4, 4441.0], [27.5, 4477.0], [27.6, 4477.0], [27.7, 4477.0], [27.8, 4477.0], [27.9, 4477.0], [28.0, 4477.0], [28.1, 4477.0], [28.2, 4499.0], [28.3, 4499.0], [28.4, 4499.0], [28.5, 4499.0], [28.6, 4499.0], [28.7, 4499.0], [28.8, 4501.0], [28.9, 4501.0], [29.0, 4501.0], [29.1, 4501.0], [29.2, 4501.0], [29.3, 4501.0], [29.4, 4504.0], [29.5, 4504.0], [29.6, 4504.0], [29.7, 4504.0], [29.8, 4504.0], [29.9, 4504.0], [30.0, 4569.0], [30.1, 4569.0], [30.2, 4569.0], [30.3, 4569.0], [30.4, 4569.0], [30.5, 4569.0], [30.6, 4569.0], [30.7, 4594.0], [30.8, 4594.0], [30.9, 4594.0], [31.0, 4594.0], [31.1, 4594.0], [31.2, 4594.0], [31.3, 4647.0], [31.4, 4647.0], [31.5, 4647.0], [31.6, 4647.0], [31.7, 4647.0], [31.8, 4647.0], [31.9, 4648.0], [32.0, 4648.0], [32.1, 4648.0], [32.2, 4648.0], [32.3, 4648.0], [32.4, 4648.0], [32.5, 4678.0], [32.6, 4678.0], [32.7, 4678.0], [32.8, 4678.0], [32.9, 4678.0], [33.0, 4678.0], [33.1, 4678.0], [33.2, 4694.0], [33.3, 4694.0], [33.4, 4694.0], [33.5, 4694.0], [33.6, 4694.0], [33.7, 4694.0], [33.8, 4722.0], [33.9, 4722.0], [34.0, 4722.0], [34.1, 4722.0], [34.2, 4722.0], [34.3, 4722.0], [34.4, 4732.0], [34.5, 4732.0], [34.6, 4732.0], [34.7, 4732.0], [34.8, 4732.0], [34.9, 4732.0], [35.0, 4772.0], [35.1, 4772.0], [35.2, 4772.0], [35.3, 4772.0], [35.4, 4772.0], [35.5, 4772.0], [35.6, 4772.0], [35.7, 4777.0], [35.8, 4777.0], [35.9, 4777.0], [36.0, 4777.0], [36.1, 4777.0], [36.2, 4777.0], [36.3, 4787.0], [36.4, 4787.0], [36.5, 4787.0], [36.6, 4787.0], [36.7, 4787.0], [36.8, 4787.0], [36.9, 4848.0], [37.0, 4848.0], [37.1, 4848.0], [37.2, 4848.0], [37.3, 4848.0], [37.4, 4848.0], [37.5, 4850.0], [37.6, 4850.0], [37.7, 4850.0], [37.8, 4850.0], [37.9, 4850.0], [38.0, 4850.0], [38.1, 4850.0], [38.2, 4856.0], [38.3, 4856.0], [38.4, 4856.0], [38.5, 4856.0], [38.6, 4856.0], [38.7, 4856.0], [38.8, 4868.0], [38.9, 4868.0], [39.0, 4868.0], [39.1, 4868.0], [39.2, 4868.0], [39.3, 4868.0], [39.4, 4886.0], [39.5, 4886.0], [39.6, 4886.0], [39.7, 4886.0], [39.8, 4886.0], [39.9, 4886.0], [40.0, 4887.0], [40.1, 4887.0], [40.2, 4887.0], [40.3, 4887.0], [40.4, 4887.0], [40.5, 4887.0], [40.6, 4887.0], [40.7, 4913.0], [40.8, 4913.0], [40.9, 4913.0], [41.0, 4913.0], [41.1, 4913.0], [41.2, 4913.0], [41.3, 4926.0], [41.4, 4926.0], [41.5, 4926.0], [41.6, 4926.0], [41.7, 4926.0], [41.8, 4926.0], [41.9, 4943.0], [42.0, 4943.0], [42.1, 4943.0], [42.2, 4943.0], [42.3, 4943.0], [42.4, 4943.0], [42.5, 4975.0], [42.6, 4975.0], [42.7, 4975.0], [42.8, 4975.0], [42.9, 4975.0], [43.0, 4975.0], [43.1, 4975.0], [43.2, 4983.0], [43.3, 4983.0], [43.4, 4983.0], [43.5, 4983.0], [43.6, 4983.0], [43.7, 4983.0], [43.8, 4987.0], [43.9, 4987.0], [44.0, 4987.0], [44.1, 4987.0], [44.2, 4987.0], [44.3, 4987.0], [44.4, 5047.0], [44.5, 5047.0], [44.6, 5047.0], [44.7, 5047.0], [44.8, 5047.0], [44.9, 5047.0], [45.0, 5065.0], [45.1, 5065.0], [45.2, 5065.0], [45.3, 5065.0], [45.4, 5065.0], [45.5, 5065.0], [45.6, 5065.0], [45.7, 5116.0], [45.8, 5116.0], [45.9, 5116.0], [46.0, 5116.0], [46.1, 5116.0], [46.2, 5116.0], [46.3, 5166.0], [46.4, 5166.0], [46.5, 5166.0], [46.6, 5166.0], [46.7, 5166.0], [46.8, 5166.0], [46.9, 5167.0], [47.0, 5167.0], [47.1, 5167.0], [47.2, 5167.0], [47.3, 5167.0], [47.4, 5167.0], [47.5, 5173.0], [47.6, 5173.0], [47.7, 5173.0], [47.8, 5173.0], [47.9, 5173.0], [48.0, 5173.0], [48.1, 5173.0], [48.2, 5173.0], [48.3, 5173.0], [48.4, 5173.0], [48.5, 5173.0], [48.6, 5173.0], [48.7, 5173.0], [48.8, 5221.0], [48.9, 5221.0], [49.0, 5221.0], [49.1, 5221.0], [49.2, 5221.0], [49.3, 5221.0], [49.4, 5224.0], [49.5, 5224.0], [49.6, 5224.0], [49.7, 5224.0], [49.8, 5224.0], [49.9, 5224.0], [50.0, 5267.0], [50.1, 5267.0], [50.2, 5267.0], [50.3, 5267.0], [50.4, 5267.0], [50.5, 5267.0], [50.6, 5267.0], [50.7, 5357.0], [50.8, 5357.0], [50.9, 5357.0], [51.0, 5357.0], [51.1, 5357.0], [51.2, 5357.0], [51.3, 5377.0], [51.4, 5377.0], [51.5, 5377.0], [51.6, 5377.0], [51.7, 5377.0], [51.8, 5377.0], [51.9, 5383.0], [52.0, 5383.0], [52.1, 5383.0], [52.2, 5383.0], [52.3, 5383.0], [52.4, 5383.0], [52.5, 5396.0], [52.6, 5396.0], [52.7, 5396.0], [52.8, 5396.0], [52.9, 5396.0], [53.0, 5396.0], [53.1, 5396.0], [53.2, 5409.0], [53.3, 5409.0], [53.4, 5409.0], [53.5, 5409.0], [53.6, 5409.0], [53.7, 5409.0], [53.8, 5418.0], [53.9, 5418.0], [54.0, 5418.0], [54.1, 5418.0], [54.2, 5418.0], [54.3, 5418.0], [54.4, 5439.0], [54.5, 5439.0], [54.6, 5439.0], [54.7, 5439.0], [54.8, 5439.0], [54.9, 5439.0], [55.0, 5457.0], [55.1, 5457.0], [55.2, 5457.0], [55.3, 5457.0], [55.4, 5457.0], [55.5, 5457.0], [55.6, 5457.0], [55.7, 5491.0], [55.8, 5491.0], [55.9, 5491.0], [56.0, 5491.0], [56.1, 5491.0], [56.2, 5491.0], [56.3, 5553.0], [56.4, 5553.0], [56.5, 5553.0], [56.6, 5553.0], [56.7, 5553.0], [56.8, 5553.0], [56.9, 5572.0], [57.0, 5572.0], [57.1, 5572.0], [57.2, 5572.0], [57.3, 5572.0], [57.4, 5572.0], [57.5, 5625.0], [57.6, 5625.0], [57.7, 5625.0], [57.8, 5625.0], [57.9, 5625.0], [58.0, 5625.0], [58.1, 5625.0], [58.2, 5645.0], [58.3, 5645.0], [58.4, 5645.0], [58.5, 5645.0], [58.6, 5645.0], [58.7, 5645.0], [58.8, 5651.0], [58.9, 5651.0], [59.0, 5651.0], [59.1, 5651.0], [59.2, 5651.0], [59.3, 5651.0], [59.4, 5666.0], [59.5, 5666.0], [59.6, 5666.0], [59.7, 5666.0], [59.8, 5666.0], [59.9, 5666.0], [60.0, 5718.0], [60.1, 5718.0], [60.2, 5718.0], [60.3, 5718.0], [60.4, 5718.0], [60.5, 5718.0], [60.6, 5718.0], [60.7, 5756.0], [60.8, 5756.0], [60.9, 5756.0], [61.0, 5756.0], [61.1, 5756.0], [61.2, 5756.0], [61.3, 5798.0], [61.4, 5798.0], [61.5, 5798.0], [61.6, 5798.0], [61.7, 5798.0], [61.8, 5798.0], [61.9, 5808.0], [62.0, 5808.0], [62.1, 5808.0], [62.2, 5808.0], [62.3, 5808.0], [62.4, 5808.0], [62.5, 5813.0], [62.6, 5813.0], [62.7, 5813.0], [62.8, 5813.0], [62.9, 5813.0], [63.0, 5813.0], [63.1, 5813.0], [63.2, 5845.0], [63.3, 5845.0], [63.4, 5845.0], [63.5, 5845.0], [63.6, 5845.0], [63.7, 5845.0], [63.8, 5868.0], [63.9, 5868.0], [64.0, 5868.0], [64.1, 5868.0], [64.2, 5868.0], [64.3, 5868.0], [64.4, 5906.0], [64.5, 5906.0], [64.6, 5906.0], [64.7, 5906.0], [64.8, 5906.0], [64.9, 5906.0], [65.0, 5952.0], [65.1, 5952.0], [65.2, 5952.0], [65.3, 5952.0], [65.4, 5952.0], [65.5, 5952.0], [65.6, 5952.0], [65.7, 5955.0], [65.8, 5955.0], [65.9, 5955.0], [66.0, 5955.0], [66.1, 5955.0], [66.2, 5955.0], [66.3, 5957.0], [66.4, 5957.0], [66.5, 5957.0], [66.6, 5957.0], [66.7, 5957.0], [66.8, 5957.0], [66.9, 5967.0], [67.0, 5967.0], [67.1, 5967.0], [67.2, 5967.0], [67.3, 5967.0], [67.4, 5967.0], [67.5, 6007.0], [67.6, 6007.0], [67.7, 6007.0], [67.8, 6007.0], [67.9, 6007.0], [68.0, 6007.0], [68.1, 6007.0], [68.2, 6014.0], [68.3, 6014.0], [68.4, 6014.0], [68.5, 6014.0], [68.6, 6014.0], [68.7, 6014.0], [68.8, 6035.0], [68.9, 6035.0], [69.0, 6035.0], [69.1, 6035.0], [69.2, 6035.0], [69.3, 6035.0], [69.4, 6074.0], [69.5, 6074.0], [69.6, 6074.0], [69.7, 6074.0], [69.8, 6074.0], [69.9, 6074.0], [70.0, 6078.0], [70.1, 6078.0], [70.2, 6078.0], [70.3, 6078.0], [70.4, 6078.0], [70.5, 6078.0], [70.6, 6078.0], [70.7, 6105.0], [70.8, 6105.0], [70.9, 6105.0], [71.0, 6105.0], [71.1, 6105.0], [71.2, 6105.0], [71.3, 6141.0], [71.4, 6141.0], [71.5, 6141.0], [71.6, 6141.0], [71.7, 6141.0], [71.8, 6141.0], [71.9, 6157.0], [72.0, 6157.0], [72.1, 6157.0], [72.2, 6157.0], [72.3, 6157.0], [72.4, 6157.0], [72.5, 6214.0], [72.6, 6214.0], [72.7, 6214.0], [72.8, 6214.0], [72.9, 6214.0], [73.0, 6214.0], [73.1, 6214.0], [73.2, 6254.0], [73.3, 6254.0], [73.4, 6254.0], [73.5, 6254.0], [73.6, 6254.0], [73.7, 6254.0], [73.8, 6461.0], [73.9, 6461.0], [74.0, 6461.0], [74.1, 6461.0], [74.2, 6461.0], [74.3, 6461.0], [74.4, 6520.0], [74.5, 6520.0], [74.6, 6520.0], [74.7, 6520.0], [74.8, 6520.0], [74.9, 6520.0], [75.0, 6526.0], [75.1, 6526.0], [75.2, 6526.0], [75.3, 6526.0], [75.4, 6526.0], [75.5, 6526.0], [75.6, 6526.0], [75.7, 6555.0], [75.8, 6555.0], [75.9, 6555.0], [76.0, 6555.0], [76.1, 6555.0], [76.2, 6555.0], [76.3, 6566.0], [76.4, 6566.0], [76.5, 6566.0], [76.6, 6566.0], [76.7, 6566.0], [76.8, 6566.0], [76.9, 6600.0], [77.0, 6600.0], [77.1, 6600.0], [77.2, 6600.0], [77.3, 6600.0], [77.4, 6600.0], [77.5, 6635.0], [77.6, 6635.0], [77.7, 6635.0], [77.8, 6635.0], [77.9, 6635.0], [78.0, 6635.0], [78.1, 6635.0], [78.2, 6639.0], [78.3, 6639.0], [78.4, 6639.0], [78.5, 6639.0], [78.6, 6639.0], [78.7, 6639.0], [78.8, 6639.0], [78.9, 6639.0], [79.0, 6639.0], [79.1, 6639.0], [79.2, 6639.0], [79.3, 6639.0], [79.4, 6640.0], [79.5, 6640.0], [79.6, 6640.0], [79.7, 6640.0], [79.8, 6640.0], [79.9, 6640.0], [80.0, 6706.0], [80.1, 6706.0], [80.2, 6706.0], [80.3, 6706.0], [80.4, 6706.0], [80.5, 6706.0], [80.6, 6706.0], [80.7, 6762.0], [80.8, 6762.0], [80.9, 6762.0], [81.0, 6762.0], [81.1, 6762.0], [81.2, 6762.0], [81.3, 6765.0], [81.4, 6765.0], [81.5, 6765.0], [81.6, 6765.0], [81.7, 6765.0], [81.8, 6765.0], [81.9, 6801.0], [82.0, 6801.0], [82.1, 6801.0], [82.2, 6801.0], [82.3, 6801.0], [82.4, 6801.0], [82.5, 6807.0], [82.6, 6807.0], [82.7, 6807.0], [82.8, 6807.0], [82.9, 6807.0], [83.0, 6807.0], [83.1, 6807.0], [83.2, 6870.0], [83.3, 6870.0], [83.4, 6870.0], [83.5, 6870.0], [83.6, 6870.0], [83.7, 6870.0], [83.8, 6886.0], [83.9, 6886.0], [84.0, 6886.0], [84.1, 6886.0], [84.2, 6886.0], [84.3, 6886.0], [84.4, 7097.0], [84.5, 7097.0], [84.6, 7097.0], [84.7, 7097.0], [84.8, 7097.0], [84.9, 7097.0], [85.0, 7098.0], [85.1, 7098.0], [85.2, 7098.0], [85.3, 7098.0], [85.4, 7098.0], [85.5, 7098.0], [85.6, 7098.0], [85.7, 7123.0], [85.8, 7123.0], [85.9, 7123.0], [86.0, 7123.0], [86.1, 7123.0], [86.2, 7123.0], [86.3, 7149.0], [86.4, 7149.0], [86.5, 7149.0], [86.6, 7149.0], [86.7, 7149.0], [86.8, 7149.0], [86.9, 7152.0], [87.0, 7152.0], [87.1, 7152.0], [87.2, 7152.0], [87.3, 7152.0], [87.4, 7152.0], [87.5, 7174.0], [87.6, 7174.0], [87.7, 7174.0], [87.8, 7174.0], [87.9, 7174.0], [88.0, 7174.0], [88.1, 7174.0], [88.2, 7219.0], [88.3, 7219.0], [88.4, 7219.0], [88.5, 7219.0], [88.6, 7219.0], [88.7, 7219.0], [88.8, 7270.0], [88.9, 7270.0], [89.0, 7270.0], [89.1, 7270.0], [89.2, 7270.0], [89.3, 7270.0], [89.4, 7409.0], [89.5, 7409.0], [89.6, 7409.0], [89.7, 7409.0], [89.8, 7409.0], [89.9, 7409.0], [90.0, 7588.0], [90.1, 7588.0], [90.2, 7588.0], [90.3, 7588.0], [90.4, 7588.0], [90.5, 7588.0], [90.6, 7588.0], [90.7, 7648.0], [90.8, 7648.0], [90.9, 7648.0], [91.0, 7648.0], [91.1, 7648.0], [91.2, 7648.0], [91.3, 7766.0], [91.4, 7766.0], [91.5, 7766.0], [91.6, 7766.0], [91.7, 7766.0], [91.8, 7766.0], [91.9, 7781.0], [92.0, 7781.0], [92.1, 7781.0], [92.2, 7781.0], [92.3, 7781.0], [92.4, 7781.0], [92.5, 7808.0], [92.6, 7808.0], [92.7, 7808.0], [92.8, 7808.0], [92.9, 7808.0], [93.0, 7808.0], [93.1, 7808.0], [93.2, 7899.0], [93.3, 7899.0], [93.4, 7899.0], [93.5, 7899.0], [93.6, 7899.0], [93.7, 7899.0], [93.8, 8846.0], [93.9, 8846.0], [94.0, 8846.0], [94.1, 8846.0], [94.2, 8846.0], [94.3, 8846.0], [94.4, 9300.0], [94.5, 9300.0], [94.6, 9300.0], [94.7, 9300.0], [94.8, 9300.0], [94.9, 9300.0], [95.0, 9493.0], [95.1, 9493.0], [95.2, 9493.0], [95.3, 9493.0], [95.4, 9493.0], [95.5, 9493.0], [95.6, 9493.0], [95.7, 9794.0], [95.8, 9794.0], [95.9, 9794.0], [96.0, 9794.0], [96.1, 9794.0], [96.2, 9794.0], [96.3, 10249.0], [96.4, 10249.0], [96.5, 10249.0], [96.6, 10249.0], [96.7, 10249.0], [96.8, 10249.0], [96.9, 11203.0], [97.0, 11203.0], [97.1, 11203.0], [97.2, 11203.0], [97.3, 11203.0], [97.4, 11203.0], [97.5, 11373.0], [97.6, 11373.0], [97.7, 11373.0], [97.8, 11373.0], [97.9, 11373.0], [98.0, 11373.0], [98.1, 11373.0], [98.2, 12198.0], [98.3, 12198.0], [98.4, 12198.0], [98.5, 12198.0], [98.6, 12198.0], [98.7, 12198.0], [98.8, 14204.0], [98.9, 14204.0], [99.0, 14204.0], [99.1, 14204.0], [99.2, 14204.0], [99.3, 14204.0], [99.4, 187322.0], [99.5, 187322.0], [99.6, 187322.0], [99.7, 187322.0], [99.8, 187322.0], [99.9, 187322.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 43.0, "series": [{"data": [[600.0, 2.0], [700.0, 1.0], [1000.0, 1.0], [1100.0, 2.0], [1200.0, 1.0], [1300.0, 2.0], [1400.0, 3.0], [1500.0, 3.0], [1600.0, 2.0], [2200.0, 4.0], [2300.0, 3.0], [2500.0, 2.0], [2600.0, 3.0], [2700.0, 5.0], [2800.0, 5.0], [2900.0, 10.0], [3000.0, 5.0], [3100.0, 11.0], [3200.0, 2.0], [3300.0, 1.0], [3500.0, 2.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 3.0], [4100.0, 6.0], [4200.0, 4.0], [4600.0, 4.0], [4400.0, 2.0], [4700.0, 5.0], [4800.0, 4.0], [5000.0, 4.0], [5200.0, 4.0], [5300.0, 1.0], [5600.0, 2.0], [5400.0, 1.0], [5500.0, 2.0], [5700.0, 4.0], [5800.0, 4.0], [6100.0, 2.0], [5900.0, 2.0], [6400.0, 5.0], [6500.0, 2.0], [6600.0, 2.0], [6700.0, 3.0], [6900.0, 2.0], [6800.0, 1.0], [7000.0, 2.0], [7100.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7600.0, 3.0], [7500.0, 1.0], [7800.0, 1.0], [8200.0, 1.0], [9200.0, 1.0], [9600.0, 1.0], [10800.0, 1.0], [11100.0, 1.0], [10900.0, 1.0], [400.0, 1.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 6.0], [600.0, 6.0], [700.0, 3.0], [800.0, 1.0], [900.0, 1.0], [1000.0, 3.0], [1200.0, 5.0], [1300.0, 11.0], [1400.0, 2.0], [1500.0, 2.0], [100.0, 43.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 3.0], [2000.0, 3.0], [2100.0, 2.0], [2300.0, 7.0], [2200.0, 5.0], [2400.0, 1.0], [2500.0, 2.0], [3000.0, 1.0], [3100.0, 1.0], [200.0, 10.0], [3200.0, 1.0], [3600.0, 2.0], [3900.0, 1.0], [300.0, 13.0], [5000.0, 2.0], [5100.0, 1.0], [400.0, 7.0], [500.0, 7.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[800.0, 1.0], [900.0, 1.0], [1200.0, 1.0], [1400.0, 3.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 3.0], [2000.0, 2.0], [2100.0, 1.0], [2200.0, 1.0], [187300.0, 1.0], [3100.0, 2.0], [3300.0, 3.0], [3200.0, 1.0], [3400.0, 3.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3900.0, 1.0], [4000.0, 2.0], [4100.0, 4.0], [4300.0, 5.0], [4200.0, 1.0], [4400.0, 4.0], [4500.0, 4.0], [4600.0, 4.0], [4700.0, 5.0], [4800.0, 6.0], [5000.0, 2.0], [4900.0, 6.0], [5100.0, 5.0], [5200.0, 3.0], [5300.0, 4.0], [5400.0, 5.0], [5500.0, 2.0], [5600.0, 4.0], [5800.0, 4.0], [5700.0, 3.0], [6100.0, 3.0], [6000.0, 5.0], [5900.0, 5.0], [6200.0, 2.0], [6500.0, 4.0], [6400.0, 1.0], [6600.0, 5.0], [6700.0, 3.0], [6800.0, 4.0], [7100.0, 4.0], [7000.0, 2.0], [7200.0, 2.0], [7400.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [7700.0, 2.0], [7800.0, 2.0], [8800.0, 1.0], [9300.0, 1.0], [9700.0, 1.0], [9400.0, 1.0], [10200.0, 1.0], [11200.0, 1.0], [11300.0, 1.0], [12100.0, 1.0], [14200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 187300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 340.0, "series": [{"data": [[0.0, 80.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 57.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 340.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.70178714E12, "maxY": 55.196202531645525, "series": [{"data": [[1.70178732E12, 1.0], [1.70178714E12, 55.196202531645525]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70178732E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 93.0, "minX": 1.0, "maxY": 94156.0, "series": [{"data": [[2.0, 10938.0], [3.0, 7675.0], [4.0, 692.0], [5.0, 7462.0], [6.0, 9695.0], [7.0, 9295.0], [8.0, 6136.0], [9.0, 6764.0], [10.0, 7563.0], [11.0, 6490.0], [12.0, 5809.0], [13.0, 7680.0], [14.0, 5043.0], [15.0, 4860.0], [16.0, 414.0], [17.0, 3913.0], [18.0, 7540.0], [19.0, 5094.0], [20.0, 7308.0], [21.0, 6994.0], [22.0, 5701.0], [23.0, 6705.0], [24.0, 7602.0], [25.0, 7043.0], [26.0, 4179.0], [27.0, 1339.0], [28.0, 1147.0], [29.0, 5770.0], [30.0, 4781.0], [31.0, 5911.0], [33.0, 5946.0], [32.0, 6447.0], [35.0, 4616.0], [34.0, 5837.0], [37.0, 6112.0], [36.0, 5849.0], [39.0, 6430.0], [38.0, 5291.0], [41.0, 7800.0], [40.0, 5593.0], [43.0, 8151.333333333333], [42.0, 6502.0], [45.0, 7030.0], [44.0, 7171.0], [47.0, 6765.0], [46.0, 6612.0], [49.0, 6524.0], [48.0, 6409.0], [51.0, 5860.0], [50.0, 6457.0], [53.0, 5675.0], [52.0, 5772.0], [55.0, 5413.0], [54.0, 5586.0], [57.0, 4031.0], [56.0, 5290.0], [59.0, 4788.5], [58.0, 5134.333333333333], [61.0, 4734.0], [60.0, 4461.0], [63.0, 4622.0], [62.0, 4667.0], [67.0, 3462.0], [66.0, 4202.0], [65.0, 4073.5], [64.0, 4819.166666666667], [71.0, 2147.6666666666665], [70.0, 3246.0], [69.0, 1672.0], [68.0, 2782.733333333333], [72.0, 2886.0], [73.0, 2177.0], [75.0, 3298.6666666666665], [74.0, 1352.0], [76.0, 2369.3333333333335], [77.0, 2612.0], [78.0, 2063.0], [79.0, 2954.75], [80.0, 2812.3333333333335], [1.0, 673.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[54.855345911949684, 4340.477987421386]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 434.0], [3.0, 133.0], [4.0, 127.0], [5.0, 126.0], [6.0, 553.0], [7.0, 198.0], [8.0, 117.0], [9.0, 106.0], [10.0, 2122.0], [11.0, 109.0], [12.0, 198.0], [13.0, 101.0], [14.0, 124.0], [15.0, 123.0], [16.0, 1084.0], [17.0, 181.0], [18.0, 359.0], [19.0, 127.0], [20.0, 101.0], [21.0, 103.0], [22.0, 97.0], [23.0, 96.0], [24.0, 164.0], [25.0, 109.0], [26.0, 134.0], [27.0, 108.0], [28.0, 145.0], [29.0, 136.0], [30.0, 104.0], [31.0, 124.0], [33.0, 132.0], [32.0, 360.0], [35.0, 115.0], [34.0, 115.0], [37.0, 102.0], [36.0, 108.0], [39.0, 209.0], [38.0, 105.0], [41.0, 1640.0], [40.0, 125.0], [43.0, 785.3333333333333], [42.0, 133.0], [45.0, 119.0], [44.0, 99.0], [47.0, 120.0], [46.0, 93.0], [49.0, 115.0], [48.0, 117.0], [51.0, 107.0], [50.0, 98.0], [53.0, 944.0], [52.0, 96.0], [55.0, 395.0], [54.0, 519.0], [57.0, 940.6666666666667], [56.0, 466.0], [59.0, 659.0], [58.0, 1020.3333333333334], [61.0, 253.0], [60.0, 406.0], [63.0, 225.0], [62.0, 246.0], [67.0, 1560.5], [66.0, 1072.5], [65.0, 2607.5], [64.0, 1273.8333333333333], [71.0, 1453.3333333333335], [70.0, 704.0], [69.0, 166.0], [68.0, 2433.6000000000004], [72.0, 1191.75], [73.0, 1337.0], [75.0, 759.6666666666666], [74.0, 125.0], [76.0, 1389.3333333333333], [77.0, 1489.75], [78.0, 1460.5], [79.0, 1362.35], [80.0, 1069.8333333333333], [1.0, 315.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[54.855345911949684, 991.7295597484278]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 11373.0], [3.0, 7808.0], [4.0, 819.0], [5.0, 7588.0], [6.0, 10249.0], [7.0, 9493.0], [8.0, 6254.0], [9.0, 6870.0], [10.0, 9686.0], [11.0, 6600.0], [12.0, 6007.0], [13.0, 7781.0], [14.0, 5167.0], [15.0, 4983.0], [16.0, 1498.0], [17.0, 4095.0], [18.0, 7899.0], [19.0, 5221.0], [20.0, 7409.0], [21.0, 7097.0], [22.0, 5798.0], [23.0, 6801.0], [24.0, 7766.0], [25.0, 7152.0], [26.0, 4313.0], [27.0, 1447.0], [28.0, 1292.0], [29.0, 5906.0], [30.0, 4886.0], [31.0, 6035.0], [33.0, 6078.0], [32.0, 6807.0], [35.0, 4732.0], [34.0, 5952.0], [37.0, 6214.0], [36.0, 5957.0], [39.0, 6639.0], [38.0, 5396.0], [41.0, 9441.0], [40.0, 5718.0], [43.0, 8938.0], [42.0, 6635.0], [45.0, 7149.0], [44.0, 7270.0], [47.0, 6886.0], [46.0, 6706.0], [49.0, 6639.0], [48.0, 6526.0], [51.0, 5967.0], [50.0, 6555.0], [53.0, 6619.5], [52.0, 5868.0], [55.0, 5808.0], [54.0, 6105.0], [57.0, 4972.666666666667], [56.0, 5756.0], [59.0, 5448.5], [58.0, 6155.666666666667], [61.0, 4987.0], [60.0, 4868.0], [63.0, 4848.0], [62.0, 4913.0], [67.0, 5023.5], [66.0, 5275.5], [65.0, 6681.5], [64.0, 6094.333333333333], [71.0, 3602.6666666666665], [70.0, 3951.0], [69.0, 1838.0], [68.0, 5217.466666666666], [72.0, 4078.5], [73.0, 3516.5], [75.0, 4059.0], [74.0, 1477.0], [76.0, 3759.6666666666665], [77.0, 4103.75], [78.0, 3524.0], [79.0, 4319.099999999999], [80.0, 3883.5], [1.0, 94156.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[54.51875, 6470.550000000003]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 80.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.7, "minX": 1.70178714E12, "maxY": 581624.6333333333, "series": [{"data": [[1.70178732E12, 3740.25], [1.70178714E12, 581624.6333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70178732E12, 7.7], [1.70178714E12, 1216.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70178732E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 315.0, "minX": 1.70178714E12, "maxY": 94156.0, "series": [{"data": [[1.70178732E12, 673.0], [1.70178714E12, 4363.689873417724]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.70178732E12, 315.0], [1.70178714E12, 996.0126582278483]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.70178732E12, 94156.0], [1.70178714E12, 5360.607594936711]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70178732E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 157.5, "minX": 1.70178714E12, "maxY": 3888.7405063291153, "series": [{"data": [[1.70178732E12, 545.0], [1.70178714E12, 3888.7405063291153]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.70178732E12, 315.0], [1.70178714E12, 995.6582278481013]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.70178732E12, 157.5], [1.70178714E12, 995.6582278481013]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70178732E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 181.0, "minX": 1.70178714E12, "maxY": 93758.5, "series": [{"data": [[1.70178732E12, 181.0], [1.70178714E12, 268.537974683544]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.70178732E12, 196.0], [1.70178714E12, 594.0379746835439]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.70178732E12, 93758.5], [1.70178714E12, 594.0379746835439]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70178732E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 93.0, "minX": 1.70178714E12, "maxY": 14204.0, "series": [{"data": [[1.70178732E12, 990.0], [1.70178714E12, 14204.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70178732E12, 315.0], [1.70178714E12, 93.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70178732E12, 990.0], [1.70178714E12, 6783.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70178732E12, 990.0], [1.70178714E12, 11171.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70178732E12, 673.0], [1.70178714E12, 3276.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70178732E12, 990.0], [1.70178714E12, 7613.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70178732E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 673.0, "minX": 1.0, "maxY": 187322.0, "series": [{"data": [[32.0, 1324.5], [2.0, 11155.5], [36.0, 5949.0], [38.0, 2138.0], [10.0, 2794.5], [40.0, 2930.0], [47.0, 1745.0], [12.0, 2297.0], [3.0, 673.0], [50.0, 4549.5], [13.0, 5170.0], [14.0, 6800.5], [16.0, 6735.5], [5.0, 5860.0], [21.0, 5638.0], [96.0, 2534.5], [29.0, 5221.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 187322.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 96.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4083.0, "series": [{"data": [[32.0, 1324.0], [2.0, 3258.5], [36.0, 1711.0], [38.0, 1465.0], [10.0, 1393.5], [40.0, 1565.5], [47.0, 754.0], [12.0, 1619.5], [3.0, 315.0], [50.0, 1039.5], [13.0, 1570.0], [14.0, 4083.0], [16.0, 3641.0], [5.0, 181.0], [21.0, 1385.0], [96.0, 1497.0], [29.0, 1083.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 96.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.70178714E12, "maxY": 7.916666666666667, "series": [{"data": [[1.70178732E12, 0.05], [1.70178714E12, 7.916666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70178732E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70178714E12, "maxY": 5.266666666666667, "series": [{"data": [[1.70178732E12, 0.03333333333333333], [1.70178714E12, 5.266666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70178732E12, 0.016666666666666666], [1.70178714E12, 2.6333333333333333]], "isOverall": false, "label": "302", "isController": false}, {"data": [[1.70178732E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70178732E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70178714E12, "maxY": 2.6333333333333333, "series": [{"data": [[1.70178732E12, 0.016666666666666666], [1.70178714E12, 2.6333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.70178732E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.70178732E12, 0.016666666666666666], [1.70178714E12, 2.6333333333333333]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.70178732E12, 0.016666666666666666], [1.70178714E12, 2.6333333333333333]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70178732E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70178714E12, "maxY": 7.9, "series": [{"data": [[1.70178732E12, 0.05], [1.70178714E12, 7.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70178732E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70178732E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

